{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nconst initialState = {\n  todoList: []\n};\nconst todoSlice = createSlice({\n  name: 'todos',\n  initialState,\n  reducers: {\n    saveTodo: (state, action) => {\n      state.todoList.push(action.payload);\n    },\n    setCheck: (state, action) => {\n      state.todoList.map(item => {\n        if (action.payload == item.id) if (item.done == true) {\n          item.done = false;\n        }\n      });\n    }\n  }\n});\nexport const {\n  saveTodo\n} = todoSlice.actions;\nexport const selectTodoList = state => state.todos.todoList;\nexport default todoSlice.reducer;","map":{"version":3,"sources":["C:/Users/sreelekha.vs/Desktop/react-nanodegree/redux-todo/src/features/todoSlice.js"],"names":["createSlice","initialState","todoList","todoSlice","name","reducers","saveTodo","state","action","push","payload","setCheck","map","item","id","done","actions","selectTodoList","todos","reducer"],"mappings":"AAAA,SAASA,WAAT,QAA4B,kBAA5B;AAEA,MAAMC,YAAY,GAAG;AACrBC,EAAAA,QAAQ,EAAE;AADW,CAArB;AAIA,MAAMC,SAAS,GAAGH,WAAW,CAAC;AAC1BI,EAAAA,IAAI,EAAE,OADoB;AAE1BH,EAAAA,YAF0B;AAG1BI,EAAAA,QAAQ,EAAE;AACNC,IAAAA,QAAQ,EAAE,CAACC,KAAD,EAAQC,MAAR,KAAkB;AACxBD,MAAAA,KAAK,CAACL,QAAN,CAAeO,IAAf,CAAoBD,MAAM,CAACE,OAA3B;AACH,KAHK;AAINC,IAAAA,QAAQ,EAAC,CAACJ,KAAD,EAAQC,MAAR,KAAkB;AACvBD,MAAAA,KAAK,CAACL,QAAN,CAAeU,GAAf,CAAmBC,IAAI,IAAI;AACvB,YAAGL,MAAM,CAACE,OAAP,IAAkBG,IAAI,CAACC,EAA1B,EACI,IAAGD,IAAI,CAACE,IAAL,IAAa,IAAhB,EAAqB;AACjBF,UAAAA,IAAI,CAACE,IAAL,GAAY,KAAZ;AACH;AAER,OAND;AAOH;AAZK;AAHgB,CAAD,CAA7B;AAmBA,OAAO,MAAM;AAAET,EAAAA;AAAF,IAAeH,SAAS,CAACa,OAA/B;AAEP,OAAO,MAAMC,cAAc,GAAGV,KAAK,IAAIA,KAAK,CAACW,KAAN,CAAYhB,QAA5C;AAEP,eAAeC,SAAS,CAACgB,OAAzB","sourcesContent":["import { createSlice } from '@reduxjs/toolkit'\r\n\r\nconst initialState = {\r\ntodoList: []\r\n}\r\n\r\nconst todoSlice = createSlice({\r\n    name: 'todos',\r\n    initialState,\r\n    reducers: {\r\n        saveTodo: (state, action) =>{\r\n            state.todoList.push(action.payload)\r\n        },\r\n        setCheck:(state, action) =>{\r\n            state.todoList.map(item => {\r\n                if(action.payload == item.id)\r\n                    if(item.done == true){\r\n                        item.done = false\r\n                    }\r\n                        \r\n            })\r\n        }\r\n    }\r\n});\r\n\r\nexport const { saveTodo } = todoSlice.actions\r\n\r\nexport const selectTodoList = state => state.todos.todoList\r\n\r\nexport default todoSlice.reducer"]},"metadata":{},"sourceType":"module"}